<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Concerns\HasUuids;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use Illuminate\Database\Eloquent\Model;

class FinalClient extends Model
{
    use HasFactory, HasUuids, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */

    protected $fillable = [

        'name',

        'phone',

        'email',

        'client_id',

        'garage_id',

        'stopped_at',
    ];

    protected $casts = [

        'stopped_at' => 'datetime'
    ];

    protected $appends = [
        'final_client_qr',
    ];

    protected function createdAt(): Attribute
    {
        return Attribute::make(
            get: fn(string $value) => date('Y-m-d', strtotime($value)),
        );
    }

    public function client(): BelongsTo
    {
        return $this->belongsTo(User::class, 'client_id', 'id');
    }

    public function garage(): BelongsTo
    {
        return $this->belongsTo(Garage::class, 'garage_id', 'id');
    }

    public function getFinalClientQrAttribute()
    {
        $prefix = "ORB"; // [ Length => 3, Data => ORB, Comment =>Hard-code ]
        $version = "001"; // [ Length => 3, Data => 001, Comment =>Hard-code ]
        // $systemNo = "0790001"; //"7901001"; // [ Length => 7, Data => CODESITE+NODE ZONE, Comment =>To be provided by Orbility ]7901001
        $systemNo = $this->client->garage ? $this->client->garage->site_number : "0796001"; //"7901001"; // [ Length => 7, Data => CODESITE+NODE ZONE, Comment =>To be provided by Orbility ]7901001
        $accountNumber = "00000"; //"00001"; // [ Length => 5, Data => 00001, Comment =>Hard-code  ]
        $ID = $this->generateGarageIncrementalNumber($this->client->garage->id); //;"7979797979"; //"0012312345"; // [ Length => 10, Data => 0012312345, Comment =>Incremental number to be generated by the app  ]
        $validFrom = /* "20250317102000" */ Carbon::now()->format('YmdHis'); // [ Length => 14, Data => 20130801142500, Comment =>Date/Hour on format YYYYMMDDHHMMSS To be generated by the App ]
        // $validUntil = Carbon::now()->addHours(1)->format('YmdHis'); // [ Length => 14, Data => 20130910235959, Comment =>Date/Hour on format YYYYMMDDHHMMSS To be generated by the App ]
        $validUntil = /* "20250320122000" */ Carbon::now()->addDays(10)->format('YmdHis'); // [ Length => 14, Data => 20130910235959, Comment =>Date/Hour on format YYYYMMDDHHMMSS To be generated by the App ]
        $rebateType = "01"; // [ Length => 2, Data => 01, Comment =>Hard-code ]
        $valueOfTheRebate  = "00000"; //"00000"; // [ Length => 5, Data => 00000, Comment =>Hard-code ]
        $numberOfUses  = "001"; //"001"; // [ Length => 3, Data => 001, Comment =>Hard-code ]
        $empty  = "          "; //<10 spaces> Must leave the spaces
        // $additionalData  = "0000000000"; // [ Length => 10, Data => 0000000000, Comment =>Hard-code ]

        $clefElectra = "A54_&ELECTRA24";

        $code =  $prefix . $version . $systemNo . $accountNumber . $ID . $validFrom . $validUntil . $rebateType . $valueOfTheRebate . $numberOfUses . $empty /* . $additionalData */;

        $hashed_code = hash('sha1', $code . $clefElectra);

        $checkSum = strtoupper(substr($hashed_code, 5, 1) . substr($hashed_code, 10, 1) . substr($hashed_code, 15, 1));

        $compelete_code = $code . $checkSum;

        // dd($compelete_code);

        // dd($compelete_code);
        // dd($compelete_code);

        // return strlen($compelete_code);
        return QrCode::size(250)->generate($compelete_code);
    }


    public function generateGarageIncrementalNumber($garageId)
    {
        $lastIncrementalNumber = IncrementalNumber::where('garage_id', $garageId)->latest()->first();

        $nextNumber = $lastIncrementalNumber ? (int)$lastIncrementalNumber->number + 1 : 1;

        $nextNumber = str_pad((string)$nextNumber, 10, '0', STR_PAD_LEFT);

        // dd($nextNumber);

        IncrementalNumber::create([
            'garage_id' => $garageId,
            'final_client_id' => $this->id,
            'number' => (string)$nextNumber,
        ]);

        return $nextNumber;
    }
}



/*



// Define the keys
$Clef_electra = 'A54_&ELECTRA24';
$Clef_engie = 'G71_&ENGIE72';
$Clef_7emesens = 'ZV5_&7SENSJ542';

// Define the data
$Prefix = 'ORB';
$Version = '001';
$SystemNo = '0790001';
$AccountNumber = '00000';
$ID = '0123456789';
$ValidFrom = '20250317102000';
$ValidUntil = '20250320122000';
$RebateType = '01';
$ValueOfRebate = '00000';
$NumberOfUses = '001';
$AdditionalData = '          ';

// Construct the code string
$Code = $Prefix .
        $Version .
        $SystemNo .
        $AccountNumber .
        $ID .
        $ValidFrom .
        $ValidUntil .
        $RebateType .
        $ValueOfRebate .
        $NumberOfUses .
        $AdditionalData;

// Choose the appropriate $Clef key (for this example i used $Clef_electra)
$Clef = $Clef_electra;

// Calculate the SHA1 hash
$SHA1 = hash('sha1', $Code . $Clef);

// Define the positions for the checksum
$X = 5;
$Y = 10;
$Z = 15;

// Extract the checksum characters (3 characters for 3 bytes)
$Checksum = strtoupper(substr($SHA1,$X,1) . substr($SHA1,$Y,1) . substr($SHA1,$Z,1));


// Construct the QR code
$Qrcode = $Code . $Checksum;

// Output the results with debug statements
echo "Code: " . $Code . "\n";
echo "SHA1: " . $SHA1 . "\n";
echo "Checksum: " . $Checksum . "\n";
echo "QR Code: " . $Qrcode . "\n";

// Debug statements
echo "SHA1 at position $X: " . substr($SHA1, $X , 1) . "\n";
echo "SHA1 at position $Y: " . substr($SHA1, $Y , 1) . "\n";
echo "SHA1 at position $Z: " . substr($SHA1, $Z , 1) . "\n";













*/
